<?php

namespace App\Http\Controllers\Admin;

use App\Http\Requests\PageRequest;
use Backpack\CRUD\app\Http\Controllers\CrudController;
use Backpack\CRUD\app\Library\CrudPanel\CrudPanelFacade as CRUD;

use App\Models\Page;
use App\Models\Landing;
/**
 * Class SupplierCrudController
 * @package App\Http\Controllers\Admin
 * @property-read CrudPanel $crud
 */
class PageCrudController extends CrudController
{
    use \Backpack\CRUD\app\Http\Controllers\Operations\ListOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\CreateOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\UpdateOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\DeleteOperation;
    // use \Backpack\CRUD\app\Http\Controllers\Operations\ShowOperation;

    private $filter_landings = [];

    public function setup()
    {
        $this->crud->setModel(Page::class);
        $this->crud->setRoute(config('backpack.base.route_prefix') . '/page');
        $this->crud->setEntityNameStrings('—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '—Å—Ç—Ä–∞–Ω–∏—Ü—ã');


      $this->filter_landings = Landing::pluck('name', 'id')->toArray();
    }

    protected function setupListOperation()
    {
      // Filter by landing
      $this->crud->addFilter([
        'name' => 'landing',
        'label' => '–õ–µ–Ω–¥–∏–Ω–≥',
        'type' => 'select2',
      ], function(){
        $list = ['empty' => 'üî¥ –ë–µ–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞'] + $this->filter_landings;
        return $list;
      }, function($id){
        if($id === 'empty') {
          $this->crud->query->whereNull('landing_id');
        }else {
          $this->crud->query->where('landing_id', $id);
        }
      });

      $this->crud->addFilter([
        'name' => 'is_active',
        'label' => '–ê–∫—Ç–∏–≤–Ω—ã–π',
        'type' => 'select2',
      ], function(){
        return [
          0 => 'üî¥ –ù–µ –∞–∫—Ç–∏–≤–Ω—ã–π',
          1 => 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π',
        ];
      }, function($is_active){
        $this->crud->query->where('is_active', $is_active);
      });

      $this->crud->addColumn([
        'name' => 'is_active',
        'label' => 'üü¢',
        'type' => 'check'
      ]);

      $this->crud->addColumn([
        'name' => 'name',
        'label' => '–ù–∞–∑–≤–∞–Ω–∏–µ',
      ]);

      $this->crud->addColumn([
        'name' => 'slug',
        'label' => 'URL',
      ]);

      $this->crud->addColumn([
        'name' => 'landing',
        'label' => '–õ–µ–Ω–¥–∏–Ω–≥',
        'type' => 'relationship'
      ]);

      $this->crud->addColumn([
        'name' => 'parent',
        'label' => '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–ª—è',
        'type' => 'relationship'
      ]);
    }

    protected function setupCreateOperation()
    {
      $this->crud->setValidation(PageRequest::class);

      // IN INDEX
      $this->crud->addField([
        'name' => 'in_index',
        'label' => '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç—Å—è?',
        'type' => 'boolean',
        'default' => '1',
        'hint' => '–£–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∏–Ω–¥–µ–∫—Å–∞',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // IS ACTIVE
      $this->crud->addField([
        'name' => 'is_active',
        'label' => '–ê–∫—Ç–∏–≤–µ–Ω',
        'type' => 'boolean',
        'default' => '1',
        'hint' => '–£–±–µ—Ä–∏—Ç–µ –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // IS ACTIVE
      $this->crud->addField([
        'name' => 'is_home',
        'label' => '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
        'type' => 'boolean',
        'default' => '0',
        'hint' => '–ú–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞.',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // IS REVIEWS
      $this->crud->addField([
        'name' => 'is_reviews',
        'label' => '–í–∫–ª—é—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã?',
        'type' => 'boolean',
        'default' => '0',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      $this->crud->addField([
        'name' => 'breadcrumbs',
        'label' => "–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏", 
        'type' => 'checkbox',
        'default' => 1,
        'fake' => true, 
        'store_in' => 'extras',
        'hint' => '–ü–æ–∫–∞–∑–∞—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∏ breadcrumbs, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)?',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // HTML
      $this->crud->addField([
        'name' => 'landing',
        'label' => '–õ–µ–Ω–¥–∏–Ω–≥',
        'type' => 'relationship',
        'model'     => 'App\Models\Landing',
        'attribute' => 'name',
        'entity' => 'landing',
        'multiple' => false,
        'placeholder' => "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–Ω–¥–∏–Ω–≥",
        'hint' => '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      $this->crud->addField([
        'name' => 'name',
        'label' => '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'type' => 'text',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // SLUG
      $this->crud->addField([
        'name' => 'slug',
        'label' => 'Slug',
        'hint' => '–ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è.',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);


      // Parent
      $this->crud->addField([
        'name' => 'parent',
        'label' => '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        'type' => 'relationship',
        'model'     => 'App\Models\Page',
        'attribute' => 'name',
        'entity' => 'parent',
        'multiple' => false,
        'placeholder' => "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        'hint' => '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —è–∑—ã–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ—Ç–æ—Ä–æ–π —è–≤–ª—è–µ—Ç—Å—è –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
        'tab' => '–û—Å–Ω–æ–≤–Ω–æ–µ'
      ]);

      // CONTENT
      $this->crud->addField([
        'name' => 'fields',
        'label' => "–®–æ—Ä—Ç–∫–æ–¥—ã", 
        'type' => 'repeatable',
        'fields' => [
          [
            'name'  => 'shortcode',
            'type'  => 'text',
            'label' => 'Shortcode',
            'hint' => '–ö–ª—é—á —à–æ—Ä—Ç–∫–æ–¥–∞, –±–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {{-- --}}',
          ],
          [
            'name'  => 'is_clear_tags',
            'type'  => 'checkbox',
            'label' => '–û—á–∏—â–∞—Ç—å html-—Ç–µ–≥–∏?',
          ],
          [
            'name'  => 'value',
            'type'  => 'ckeditor',
            'label' => '–ó–Ω–∞—á–µ–Ω–∏–µ',
            'attributes' => [
              'rows' => 10
            ],
          ],
        ],
        'new_item_label'  => '–î–æ–±–∞–≤–∏—Ç—å —à–æ—Ä—Ç–∫–æ–¥',
        'init_rows' => 0,
        'min_rows' => 0,
        'tab' => '–ö–æ–Ω—Ç–µ–Ω—Ç'
      ]);

      $this->crud->addField([
        'name' => 'content',
        'label' => 'Html —à–∞–±–ª–æ–Ω',
        'type' => 'ace',
        'hint' => '–î–ª—è –∑–∞–º–µ–Ω—ã —á–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —à–æ—Ä—Ç–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω <code>{{-- shortcode --}}</code>',
        'tab' => '–ö–æ–Ω—Ç–µ–Ω—Ç'
      ]);

      // SEO
      $this->crud->addField([
        'name' => 'head_stack',
        'label' => "–¢–µ–≥–∏ –≤ head", 
        'type' => 'repeatable',
        'fields' => [
          [
            'name'  => 'tag_name',
            'type'  => 'text',
            'label' => '–ù–∞–∑–≤–∞–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)',
          ],
          [
            'name'  => 'tag',
            'type'  => 'textarea',
            'label' => '–¢–µ–≥',
          ],
        ],
        'new_item_label'  => '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥',
        'init_rows' => 0,
        'min_rows' => 0,
        'tab' => 'SEO'
      ]);

      $this->crud->addField([
        'name' => 'meta_title',
        'label' => "Meta Title", 
        'type' => 'text',
        'fake' => true, 
        'store_in' => 'seo',
        'tab' => 'SEO'
      ]);

      $this->crud->addField([
          'name' => 'meta_description',
          'label' => "Meta Description", 
          'type' => 'textarea',
          'fake' => true, 
          'store_in' => 'seo',
          'tab' => 'SEO'
      ]);

      $this->crud->addField([
          'name' => 'meta_keywords',
          'label' => "Meta Keywords", 
          'type' => 'textarea',
          'fake' => true, 
          'store_in' => 'seo',
          'tab' => 'SEO'
      ]);

      $this->crud->addField([
        'name' => 'locale',
        'label' => "–Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã",
        'fake' => true, 
        'store_in' => 'seo',
        'hint' => '<code>og:locale</code>, <code>html lang=""</code>',
        'tab' => 'SEO'
      ]);
    }

    protected function setupUpdateOperation()
    {
        $this->setupCreateOperation();
    }
}
